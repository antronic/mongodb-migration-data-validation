"use strict";var o=require("dotenv"),e=require("dayjs"),t=require("crypto"),l=require("murmurhash"),n=require("fs");const s=(o,e)=>o.getSiblingDB(e).getCollectionNames(),c=(o,e)=>o.aggregate(e).toArray(),i=(o,t="created_at",l=e().toDate(),n=e().toDate())=>({pipeline:[],_pipeline:[],round:0,limit:o&&o.maximumDocumentsPerRound||1e3,initalize(){if(o&&o.custom&&(this.pipeline=[...o.custom.validationAggregation]),o&&o.hasTTL){const s=o&&o.hasTTL&&o.expireAfterSeconds||0;let c=e(n).subtract(10,"minutes").toDate();const i=e(l).subtract(s,"second").add(30,"minutes").toDate(),g=o&&o.timeField||t;this.pipeline.push({$match:{[g]:{$gte:i,$lt:c}}})}return this.pipeline.push({$sort:{_id:1}}),this._pipeline=[...this.pipeline],this},setRound(o){return this._pipeline=[...this.pipeline],this.round=o,this._pipeline.push({$skip:(this.round-1)*this.limit}),this},generate(){return this._pipeline.push({$limit:this.limit}),this._pipeline}});o.config({override:!0});const g=process.env.ENCRYPTION_KEY,r=process.env.ENCRYPTION_IV,a=({hostname:o,username:e,encryptedPassword:l})=>{const n=(o=>{void 0!==g&&void 0!==r||(console.error("Please provide a KEY and IV in the .env file"),console.error("or run the command:\n$\tnpm run cli generate-key"),process.exit(1));const e=Buffer.from(g,"hex"),l=Buffer.from(r,"hex");if(console.log("KEY:",e.length),console.log("IV:",l.length),32!==e.length||16!==l.length)throw new Error("Invalid KEY or IV length. KEY must be 32 bytes and IV must be 16 bytes.");try{const n=t.createDecipheriv("aes-256-cbc",e,l);let s=n.update(o,"hex","utf8");return s+=n.final("utf8"),s}catch(o){throw console.error("Decryption error:",o.message),o}})(l);return connect(`mongodb://${e}:${n}@${o}?tls=true&tlsAllowInvalidHostnames=true&directConnection=true`)},m=o=>{if("object"!=typeof o)return"not an object";const e=Object.keys(o).sort().map((e=>{const t=o[e];return null===t?`${e}:null`:void 0===t?`${e}:undefined`:`${encodeURIComponent(e)}:${"object"==typeof t?m(t):encodeURIComponent(t)}`}));return t=e.join(""),l.v3(t).toString();var t};!function(){o.config({override:!0});const t=require("./config.qc.js");function l(o,e){n.existsSync("./.reports")||n.mkdirSync("./.reports");const t=JSON.stringify(e,null,2);n.writeFileSync(`./.reports/${o}.json`,t),console.log(`\n\t*** Report file created: ./.reports/${o}.json ***`)}const g=new Map;console.log("** QC always enabled Debug mode"),t.debug="full",t.databases.filter((o=>o.isExclude||"exclude"===t.listMode)).map((o=>o.name)),"include"!==t.listMode||t.databases.filter((o=>!o.isExclude)).map((o=>o.name));(o=>{const t=["full","info"].includes(o.debug),n=o.debug;t?console.log("** Debug mode enabled"):console.log("-- Debug mode disabled");const r=o.databases.filter((e=>e.isExclude||"exclude"===o.listMode)).map((o=>o.name)),u="include"===o.listMode?o.databases.filter((o=>!o.isExclude)).map((o=>o.name)):[];(()=>{const d=new Map,h=db,$=(o=>{const e=["admin","local","config"],t=o.adminCommand({listDatabases:1}),l=[];return t.databases.forEach((o=>{e.includes(o.name)||l.push(o.name)})),l})(db).filter((e=>{const t=o.databases.find((o=>o.name===e)),l="include"===o.listMode?!r.includes(e)&&u.includes(e):!r.includes(e);return t&&d.set(e,t),l}));console.log("Source DBs:"),console.log($);const p=a(o.target);console.log();for(const o of $){console.log(`\tdb > ${o}`);const r=d.get(o),a=[],u=[];r&&r.collections&&r.collections.forEach((o=>{("exclude"===r.listMode?r.collections.includes(o):!r.collections.includes(o))&&a.push(o),"include"===r.listMode&&r.collections.includes(o)&&u.push(o)})),console.log("\t\texcludedCollections:",a),console.log("\t\tincludedCollections:",u);const $=s(h,o).filter((o=>{if(!r)return!0;return"include"===r.listMode?u.includes(o):!a.includes(o)})),f=new Map;(r&&r.collectionDefinition||[]).forEach((o=>$.includes(o.name)&&f.set(o.name,o.options))),console.log(),console.log("\tCollections:"),console.log(`\tcoll > ${$}`),console.log();const H=[];for(const s of $){const g=Date.now(),r=f.get(s);null==r||r.maximumDocumentsPerRound;let a=0,u=0;const d=[],$=[];let D=0,b=0,V=1;const E=i(r).initalize();for(;;){const i=E.setRound(V).generate();"full"===n&&(console.log(),console.log(),console.log("----------------- AGGEGRATE PIPELINE -----------------"),console.log(),console.log(i),console.log(),console.log());const g=Date.now(),f=h.getSiblingDB(o).getCollection(s);console.log(`[${e().format("HH:mm:ss")}]\t${o}.${s} - Retrieving documents...`);const H=Date.now();console.log(`[${e().format("HH:mm:ss")}]\t\t [Source] - Retrieving documents...`);const T=c(f,i);console.log(`[${e().format("HH:mm:ss")}]\t\t [Source] - Retrieving documents - Done - [${Date.now()-H}ms]`),console.log();const v=Date.now();console.log(`[${e().format("HH:mm:ss")}]\t\t [Target] - Retrieving documents...`);const M=p.getSiblingDB(o).getCollection(s),R=c(M,i);console.log(`[${e().format("HH:mm:ss")}]\t\t [Target] - Retrieving documents - Done - [${Date.now()-v}ms]`),console.log(),++V,console.log(`[${e().format("HH:mm:ss")}]\t${o}.${s} - Retrieving documents - Done - [${Date.now()-g}ms]`);const S=Date.now();let w="",C="";"full"===n&&(console.log(),console.log(),console.log("=================================================="),console.log("#####################################################################################"),console.log(),console.log("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"),console.log(`Source documents - [Length: ${T.length}]`),console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"),console.log(T),console.log(),console.log("#####################################################################################"),console.log(),console.log("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"),console.log(`Target documents - [Length: ${T.length}]`),console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"),console.log(R),console.log("=================================================="),console.log(),console.log(),l(`${o}.${s}.source`,{metaData:{source:{length:T.length},target:{length:R.length}},sourceDocuments:T,targetDocuments:R})),r&&r.hasTTL?(t&&console.log("\t\t[DEBUG] [HAS TTL index]"),t&&console.log(`\t\t[DEBUG] Hased Match enabled: ${!0!==r.disabledHashedMatch}`),r.disabledHashedMatch?(console.log(`[${e().format("HH:mm:ss")}]\t\tCounting documents...`),d.push(T.length.toString()),$.push(R.length.toString()),console.log(`\t\tSource Documents: ${T.length}`),console.log(`\t\t\tCount: ${T.length}`),console.log(`\t\tTarget Documents: ${R.length}`),console.log(`\t\t\tCount: ${R.length}`),console.log("\t\tResult: "+(T.length===R.length?"Match":"Mismatch")),console.log()):(console.log(`[${e().format("HH:mm:ss")}]\t\tHashing documents...`),w=m(T),C=m(R),console.log(`[${e().format("HH:mm:ss")}]\t\tHased completed - [${Date.now()-S}]`),d.push(w),$.push(C),console.log(`\t\tSource Documents: ${T.length}`),console.log(`\t\t\tHash: ${w}`),console.log(`\t\tTarget Documents: ${R.length}`),console.log(`\t\t\tHash: ${C}`),console.log("\t\tResult: "+(w===C?"Match":"Mismatch")),console.log())):(t&&console.log("[DEBUG] NO TTL index"),console.log(`[${e().format("HH:mm:ss")}]\t\tHashing documents...`),w=m(T),C=m(R),console.log(`[${e().format("HH:mm:ss")}]\t\tHased completed - [${Date.now()-S}]`),d.push(w),$.push(C),console.log(`\t\tSource Documents: ${T.length}`),console.log(`\t\t\tHash: ${w}`),console.log(`\t\tTarget Documents: ${R.length}`),console.log(`\t\t\tHash: ${C}`),console.log("\t\tResult: "+(w===C?"Match":"Mismatch")),console.log()),a+=T.length,u+=R.length,w!==C?(console.log(`[${e().format("HH:mm:ss")}]\t${o}.${s} - Source: ${a} - Target: ${u}`),console.log(`[${e().format("HH:mm:ss")}]\t${o}.${s} - Hash mismatch`),console.log("----------------------------------"),console.log(),D++):b++,console.log(`[${e().format("HH:mm:ss")}]\t${o}.${s} - Current mismatch: ${D} / match: ${b}`),console.log(`[${e().format("HH:mm:ss")}][INFO] \t${o}.${s} - DONE - QR runs only once`);break}console.log(),console.log("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"),console.log(),console.log("----------------------------------"),console.log(`[${e().format("HH:mm:ss")}]\t${o}.${s} - Source: ${a} - Target: ${u}`),console.log(`[${e().format("HH:mm:ss")}]\tTotal round: ${V-1}`);const T=m(d),v=m($);console.log(),console.log(`[${e().format("HH:mm:ss")}]\tSource Hash: ${T} - Target Hash: ${v}`),console.log(`[${e().format("HH:mm:ss")}]\t${o}.${s} - ${T===v?"Match":"Mismatch"}`),console.log(`[${e().format("HH:mm:ss")}]\t${o}.${s} - All mismatch: ${D} / match: ${b} out of ${V-1} rounds`);const M=Date.now()-g;console.log(),console.log(`[${e().format("HH:mm:ss")}]\t${o}.${s} - Done [${M}ms]`),console.log("--------------------------------------------------"),console.log(),console.log("\t Creating collection report...");const R={collectionName:s,isValid:T===v,totalTime:M,stats:{source:{count:a,hash:T},target:{count:u,hash:v}}};H.push(R),console.log()}console.log("\t Creating database report...");const D={dbName:o,isValid:H.every((o=>o.isValid)),collections:H};g.set(o,D),console.log(),console.log("====================== DONE ======================"),console.log(),console.log("****************"),console.log()}console.log(),console.log("================================================="),console.log("================ Validation DONE ================"),console.log("=========VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV========="),console.log(),console.log("================================================="),console.log("==================== REPORT ====================="),console.log("================================================="),console.log(),console.log(g)})(),console.log("\n\t*** QC Process done, and exitting ***")})(t)}();
