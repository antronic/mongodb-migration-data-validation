"use strict";var o=require("dotenv"),e=require("dayjs"),t=require("crypto"),s=require("murmurhash");o.config({override:!0});const n=process.env.DATA_VALIDATION_ENCRYPTION_KEY,l=process.env.DATA_VALIDATION_ENCRYPTION_IV,c=({hostname:o,username:e,encryptedPassword:s})=>{const c=(o=>{void 0!==n&&void 0!==l||(console.error("Please provide a KEY and IV in the .env file"),console.error("or run the command:\n$\tnpm run cli generate-key"),process.exit(1));const e=Buffer.from(n,"hex"),s=Buffer.from(l,"hex");if(console.log("KEY:",e.length),console.log("IV:",s.length),32!==e.length||16!==s.length)throw new Error("Invalid KEY or IV length. KEY must be 32 bytes and IV must be 16 bytes.");try{const n=t.createDecipheriv("aes-256-cbc",e,s);let l=n.update(o,"hex","utf8");return l+=n.final("utf8"),l}catch(o){throw console.error("Decryption error:",o.message),o}})(s);return connect(`mongodb://${e}:${c}@${o}?tls=true&tlsAllowInvalidHostnames=true&directConnection=true`)},r=o=>{const e=["admin","local","config"],t=o.adminCommand({listDatabases:1}),s=[];return t.databases.forEach((o=>{e.includes(o.name)||s.push(o.name)})),s},a=(o,e)=>o.getSiblingDB(e).getCollectionNames(),i=(o,t,s=1,n="created_at",l=e().toDate(),c=e().toDate())=>{const r=t&&t.maximumDocumentsPerRound||1e3,a=[];if(t&&t.hasTTL){const o=l,s=t&&t.hasTTL&&t.expireAfterSeconds||0;let r=e(c).add(s,"second").subtract(1,"hour").toDate();const i=t&&t.timeField||n;a.push({$match:{[i]:{$gte:o,$lt:r}}})}a.push({$sort:{_id:1}}),a.push({$skip:(s-1)*r}),a.push({$limit:r});return o.aggregate(a).toArray()},g=o=>{const e=Object.keys(o).sort().map((e=>{const t=o[e];return`${e}:${"object"==typeof t?g(t):t}`}));return t=e.join(""),s.v3(t).toString();var t},m=new Map;o.config(),(o=>{const t=o.databases.filter((e=>e.isExclude||"exclude"===o.listMode)).map((o=>o.name)),s="include"===o.listMode?o.databases.filter((o=>!o.isExclude)).map((o=>o.name)):[];(()=>{const n=new Map,l=db,u=r(db).filter((e=>{const l=o.databases.find((o=>o.name===e)),c="include"===o.listMode?!t.includes(e)&&s.includes(e):!t.includes(e);return l&&n.set(e,l),c}));console.log("Source DBs:"),console.log(u);const d=c(o.target);r(d),console.log();for(const o of u){console.log(`\tdb > ${o}`);const t=n.get(o),s=[],c=[];t&&t.collections&&t.collections.forEach((o=>{("exclude"===t.listMode?t.collections.includes(o):!t.collections.includes(o))&&s.push(o),"include"===t.listMode&&t.collections.includes(o)&&c.push(o)})),console.log("\t\texcludedCollections:",s),console.log("\t\tincludedCollections:",c);const r=a(l,o).filter((o=>!t||("include"===t.listMode?c.includes(o):!s.includes(o)))),u=new Map;(t&&t.collectionDefination||[]).forEach((o=>r.includes(o.name)&&u.set(o.name,o.options))),console.log(),console.log("\tCollections:"),console.log(`\tcoll > ${r}`),console.log();const $=[];for(const t of r){const s=Date.now(),n=u.get(t),c=(null==n?void 0:n.maximumDocumentsPerRound)||1e3;let r=0,a=0;const m=[],h=[];let f=1;for(;;){const s=Date.now(),u=l.getSiblingDB(o).getCollection(t);console.log(`[${e().format("HH:mm:ss")}]\t${o}.${t} - Retrieving documents...`);const $=Date.now();console.log(`[${e().format("HH:mm:ss")}]\t\t [Source] - Retrieving documents...`);const V=i(u,n,f);console.log(`[${e().format("HH:mm:ss")}]\t\t [Source] - Retrieving documents - Done - [${Date.now()-$}]`),console.log();const H=Date.now();console.log(`[${e().format("HH:mm:ss")}]\t\t [Target] - Retrieving documents...`);const D=d.getSiblingDB(o).getCollection(t),p=i(D,n,f);console.log(`[${e().format("HH:mm:ss")}]\t\t [Target] - Retrieving documents - Done - [${Date.now()-H}]`),console.log(),++f,console.log(`[${e().format("HH:mm:ss")}]\t${o}.${t} - Retrieving documents - Done - [${Date.now()-s}]`);const b=Date.now();console.log(`[${e().format("HH:mm:ss")}]\t\tHashing documents...`);const v=g(V),T=g(p);if(console.log(`[${e().format("HH:mm:ss")}]\t\tHased completed - [${Date.now()-b}]`),m.push(v),h.push(T),console.log(`\t\tSource Documents: ${V.length}`),console.log(`\t\t\tHash: ${v}`),console.log(`\t\tTarget Documents: ${p.length}`),console.log(`\t\t\tHash: ${T}`),console.log(),r+=V.length,a+=p.length,V.length<c)break;if(v!==T){console.log(`[${e().format("HH:mm:ss")}]\t${o}.${t} - Source: ${r} - Target: ${a}`),console.log(`[${e().format("HH:mm:ss")}]\t${o}.${t} - Hash mismatch`),console.log("----------------------------------");break}}console.log("----------------------------------"),console.log(`[${e().format("HH:mm:ss")}]\t${o}.${t} - Source: ${r} - Target: ${a}`),console.log(`[${e().format("HH:mm:ss")}]\tTotal round: ${f-1}`);const V=g(m),H=g(h);console.log(),console.log(`[${e().format("HH:mm:ss")}]\tSource Hash: ${V} - Target Hash: ${H}`),console.log(`[${e().format("HH:mm:ss")}]\t${o}.${t} - ${V===H?"Match":"Mismatch"}`);const D=Date.now()-s;console.log(),console.log(`[${e().format("HH:mm:ss")}]\t${o}.${t} - Done [${D}ms]`),console.log("--------------------------------------------------"),console.log(),console.log("\t Creating collection report...");const p={collectionName:t,isValid:V===H,totalTime:D,stats:{source:{count:r,hash:V},target:{count:a,hash:H}}};$.push(p),console.log()}console.log("\t Creating database report...");const h={dbName:o,isValid:$.every((o=>o.isValid)),collections:$};m.set(o,h),console.log(),console.log("====================== DONE ======================"),console.log(),console.log("****************"),console.log()}console.log(),console.log("================================================="),console.log("================ Validation DONE ================"),console.log("=========VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV========="),console.log(),console.log("================================================="),console.log("==================== REPORT ====================="),console.log("================================================="),console.log(),console.log(m)})()})(require("./config.js"));
