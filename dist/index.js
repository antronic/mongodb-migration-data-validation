"use strict";var o=require("dayjs"),e=require("dotenv"),t=require("crypto"),s=require("murmurhash");e.config();const n=process.env.ENCRYPTION_KEY,l=process.env.ENCRYPTION_IV,c=({hostname:o,username:e,encryptedPassword:s})=>{const c=(o=>{void 0!==n&&void 0!==l||(console.error("Please provide a KEY and IV in the .env file"),console.error("or run the command:\n$\tnpm run cli generate-key"),process.exit(1));const e=Buffer.from(n,"hex"),s=Buffer.from(l,"hex"),c=t.createDecipheriv("aes-256-cbc",e,s);let a=c.update(o,"hex","utf8");return a+=c.final("utf8"),a})(s);return connect(`mongodb://${e}:${c}@${o}?tls=true&tlsAllowInvalidHostnames=true&directConnection=true`)},a=o=>{const e=["admin","local","config"],t=o.adminCommand({listDatabases:1}),s=[];return t.databases.forEach((o=>{e.includes(o.name)||s.push(o.name)})),s},i=(o,e)=>o.getSiblingDB(e).getCollectionNames(),r=(e,t,s=1,n="created_at",l=o().toDate(),c=o().toDate())=>{const a=t&&t.maximumDocumentsPerRound||1e3,i=[];if(t&&t.hasTTL){const e=l,s=t&&t.hasTTL&&t.expireAfterSeconds||0;let a=o(c).add(s,"second").subtract(1,"hour").toDate();const r=t&&t.timeField||n;i.push({$match:{[r]:{$gte:e,$lt:a}}})}i.push({$sort:{_id:1}}),i.push({$skip:(s-1)*a}),i.push({$limit:a});return e.aggregate(i).toArray()},m=o=>{const e=Object.keys(o).sort().map((e=>{const t=o[e];return`${e}:${"object"==typeof t?m(t):t}`}));return t=e.join(""),s.v3(t).toString();var t},d=new Map;(e=>{const t=e.databases.filter((o=>o.isExclude||"exclude"===e.listMode)).map((o=>o.name)),s="include"===e.listMode?e.databases.filter((o=>!o.isExclude)).map((o=>o.name)):[];(()=>{const n=new Map,l=db,g=a(db).filter((o=>{const l=e.databases.find((e=>e.name===o)),c="include"===e.listMode?!t.includes(o)&&s.includes(o):!t.includes(o);return l&&n.set(o,l),c}));console.log("Source DBs:"),console.log(g);const u=c(e.target);a(u),console.log();for(const e of g){console.log(`\tdb > ${e}`);const t=n.get(e),s=[],c=[];t&&t.collections&&t.collections.forEach((o=>{("exclude"===t.listMode?t.collections.includes(o):!t.collections.includes(o))&&s.push(o),"include"===t.listMode&&t.collections.includes(o)&&c.push(o)})),console.log("\t\texcludedCollections:",s),console.log("\t\tincludedCollections:",c);const a=i(l,e).filter((o=>!t||("include"===t.listMode?c.includes(o):!s.includes(o)))),g=new Map;(t&&t.collectionDefination||[]).forEach((o=>a.includes(o.name)&&g.set(o.name,o.options))),console.log(),console.log("\tCollections:"),console.log(`\tcoll > ${a}`),console.log();const $=[];for(const t of a){const s=Date.now(),n=g.get(t),c=(null==n?void 0:n.maximumDocumentsPerRound)||1e3;let a=0,i=0;const d=[],f=[];let h=1;for(;;){const s=Date.now(),g=l.getSiblingDB(e).getCollection(t);console.log(`[${o().format("HH:mm:ss")}]\t${e}.${t} - Retrieving documents...`);const $=Date.now();console.log(`[${o().format("HH:mm:ss")}]\t\t [Source] - Retrieving documents...`);const H=r(g,n,h);console.log(`[${o().format("HH:mm:ss")}]\t\t [Source] - Retrieving documents - Done - [${Date.now()-$}]`),console.log();const V=Date.now();console.log(`[${o().format("HH:mm:ss")}]\t\t [Target] - Retrieving documents...`);const p=u.getSiblingDB(e).getCollection(t),D=r(p,n,h);console.log(`[${o().format("HH:mm:ss")}]\t\t [Target] - Retrieving documents - Done - [${Date.now()-V}]`),console.log(),++h,console.log(`[${o().format("HH:mm:ss")}]\t${e}.${t} - Retrieving documents - Done - [${Date.now()-s}]`);const b=Date.now();console.log(`[${o().format("HH:mm:ss")}]\t\tHashing documents...`);const v=m(H),x=m(D);if(console.log(`[${o().format("HH:mm:ss")}]\t\tHased completed - [${Date.now()-b}]`),d.push(v),f.push(x),console.log(`\t\tSource Documents: ${H.length}`),console.log(`\t\t\tHash: ${v}`),console.log(`\t\tTarget Documents: ${D.length}`),console.log(`\t\t\tHash: ${x}`),console.log(),a+=H.length,i+=D.length,H.length<c)break;if(v!==x){console.log(`[${o().format("HH:mm:ss")}]\t${e}.${t} - Source: ${a} - Target: ${i}`),console.log(`[${o().format("HH:mm:ss")}]\t${e}.${t} - Hash mismatch`),console.log("----------------------------------");break}}console.log("----------------------------------"),console.log(`[${o().format("HH:mm:ss")}]\t${e}.${t} - Source: ${a} - Target: ${i}`),console.log(`[${o().format("HH:mm:ss")}]\tTotal round: ${h-1}`);const H=m(d),V=m(f);console.log(),console.log(`[${o().format("HH:mm:ss")}]\tSource Hash: ${H} - Target Hash: ${V}`),console.log(`[${o().format("HH:mm:ss")}]\t${e}.${t} - ${H===V?"Match":"Mismatch"}`);const p=Date.now()-s;console.log(),console.log(`[${o().format("HH:mm:ss")}]\t${e}.${t} - Done [${p}ms]`),console.log("--------------------------------------------------"),console.log(),console.log("\t Creating collection report...");const D={collectionName:t,isValid:H===V,totalTime:p,stats:{source:{count:a,hash:H},target:{count:i,hash:V}}};$.push(D),console.log()}console.log("\t Creating database report...");const f={dbName:e,isValid:$.every((o=>o.isValid)),collections:$};d.set(e,f),console.log(),console.log("====================== DONE ======================"),console.log(),console.log("****************"),console.log()}console.log(),console.log("================================================="),console.log("================ Validation DONE ================"),console.log("=========VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV========="),console.log(),console.log("================================================="),console.log("==================== REPORT ====================="),console.log("================================================="),console.log(),console.log(d)})()})({target:{hostname:"localhost:29001",username:"observer",encryptedPassword:"42f6fdcd56a9f2c3de49bdf97b1eb9cc"},listMode:"include",databases:[{name:"jirac",isExclude:!1,listMode:"exclude",collections:[],collectionDefination:[{name:"transactions_1",options:{maximumDocumentsPerRound:100,hasTTL:!0,timeField:"created_at",expireAfterSeconds:2592e3,indexName:"created_at_1"}}]},{name:"test",isExclude:!1,listMode:"exclude",collections:[],collectionDefination:[]}]});
